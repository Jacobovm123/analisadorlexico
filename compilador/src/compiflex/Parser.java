
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 27 22:28:03 CST 2018
//----------------------------------------------------

package compiflex;

import java_cup.runtime.*;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 27 22:28:03 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\004\010\000\002\005\012\000\002\006\006\000" +
    "\002\006\005\000\002\006\005\000\002\006\003\000\002" +
    "\010\004\000\002\010\004\000\002\010\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\011\005\000\002\012\007\000\002\013\007\000" +
    "\002\013\007\000\002\013\007\000\002\013\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\026\002\ufffc\004\012\007\005\011\015\012" +
    "\010\015\014\016\020\025\004\026\022\027\011\001\002" +
    "\000\004\005\ufff1\001\002\000\004\007\005\001\002\000" +
    "\004\002\001\001\002\000\026\002\ufffc\004\012\007\005" +
    "\011\015\012\010\015\014\016\020\025\004\026\022\027" +
    "\011\001\002\000\004\005\063\001\002\000\004\005\ufff0" +
    "\001\002\000\004\005\ufff2\001\002\000\004\002\062\001" +
    "\002\000\004\011\032\001\002\000\026\002\ufff6\004\ufff6" +
    "\007\ufff6\011\ufff6\012\ufff6\015\ufff6\016\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\001\002\000\026\002\ufffc\004\012\007\005" +
    "\011\015\012\010\015\014\016\020\025\004\026\022\027" +
    "\011\001\002\000\004\005\026\001\002\000\004\005\024" +
    "\001\002\000\026\002\ufffc\004\012\007\005\011\015\012" +
    "\010\015\014\016\020\025\004\026\022\027\011\001\002" +
    "\000\004\005\uffef\001\002\000\004\002\uffff\001\002\000" +
    "\004\017\025\001\002\000\026\002\ufff7\004\ufff7\007\ufff7" +
    "\011\ufff7\012\ufff7\015\ufff7\016\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\001\002\000\004\013\027\001\002\000\004\014\030" +
    "\001\002\000\026\002\ufff9\004\ufff9\007\ufff9\011\ufff9\012" +
    "\ufff9\015\ufff9\016\ufff9\025\ufff9\026\ufff9\027\ufff9\001\002" +
    "\000\004\002\ufffe\001\002\000\014\004\012\005\034\025" +
    "\004\026\022\027\011\001\002\000\014\004\012\005\034" +
    "\025\004\026\022\027\011\001\002\000\004\020\047\001" +
    "\002\000\004\005\042\001\002\000\026\002\ufff8\004\ufff8" +
    "\007\ufff8\011\ufff8\012\ufff8\015\ufff8\016\ufff8\025\ufff8\026" +
    "\ufff8\027\ufff8\001\002\000\026\002\ufff3\004\ufff3\007\ufff3" +
    "\011\ufff3\012\ufff3\015\ufff3\016\ufff3\025\ufff3\026\ufff3\027" +
    "\ufff3\001\002\000\014\004\012\005\034\025\004\026\022" +
    "\027\011\001\002\000\026\002\ufff4\004\ufff4\007\ufff4\011" +
    "\ufff4\012\ufff4\015\ufff4\016\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\001\002\000\006\017\043\020\044\001\002\000\014\004" +
    "\uffee\005\uffee\025\uffee\026\uffee\027\uffee\001\002\000\004" +
    "\006\045\001\002\000\004\017\046\001\002\000\014\004" +
    "\uffed\005\uffed\025\uffed\026\uffed\027\uffed\001\002\000\004" +
    "\005\050\001\002\000\012\021\051\022\052\023\054\024" +
    "\053\001\002\000\004\006\060\001\002\000\004\006\057" +
    "\001\002\000\004\006\056\001\002\000\004\006\055\001" +
    "\002\000\026\002\uffea\004\uffea\007\uffea\011\uffea\012\uffea" +
    "\015\uffea\016\uffea\025\uffea\026\uffea\027\uffea\001\002\000" +
    "\026\002\uffe9\004\uffe9\007\uffe9\011\uffe9\012\uffe9\015\uffe9" +
    "\016\uffe9\025\uffe9\026\uffe9\027\uffe9\001\002\000\026\002" +
    "\uffeb\004\uffeb\007\uffeb\011\uffeb\012\uffeb\015\uffeb\016\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\001\002\000\026\002\uffec\004" +
    "\uffec\007\uffec\011\uffec\012\uffec\015\uffec\016\uffec\025\uffec" +
    "\026\uffec\027\uffec\001\002\000\026\002\ufff5\004\ufff5\007" +
    "\ufff5\011\ufff5\012\ufff5\015\ufff5\016\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\001\002\000\004\002\000\001\002\000\004\013" +
    "\064\001\002\000\004\014\065\001\002\000\004\015\066" +
    "\001\002\000\004\010\067\001\002\000\014\004\012\005" +
    "\034\025\004\026\022\027\011\001\002\000\004\011\071" +
    "\001\002\000\026\002\ufffa\004\ufffa\007\ufffa\011\ufffa\012" +
    "\ufffa\015\ufffa\016\ufffa\025\ufffa\026\ufffa\027\ufffa\001\002" +
    "\000\004\002\ufffd\001\002\000\004\005\074\001\002\000" +
    "\004\010\075\001\002\000\014\004\012\005\034\025\004" +
    "\026\022\027\011\001\002\000\004\011\077\001\002\000" +
    "\030\002\ufffb\004\ufffb\005\ufffb\007\ufffb\011\ufffb\012\ufffb" +
    "\015\ufffb\016\ufffb\025\ufffb\026\ufffb\027\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\016\002\012\003\005\004\020\005\015\006" +
    "\006\007\016\001\001\000\002\001\001\000\004\004\072" +
    "\001\001\000\002\001\001\000\014\003\071\004\020\005" +
    "\015\006\006\007\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\030\004\020\005\015" +
    "\006\006\007\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\022\004\020\005\015\006\006\007\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\034\010" +
    "\035\011\032\012\037\013\036\001\001\000\014\007\034" +
    "\010\060\011\032\012\037\013\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\034\010\040\011\032\012\037\013\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\034\010\067\011\032\012\037\013\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\034\010\075\011" +
    "\032\012\037\013\036\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Writer writer;

    public void setWriter(Writer writer) {
        this.writer = writer;
    }

    public Writer getWriter() {
        return this.writer;
    }

    public void append(String string) throws IOException {
        this.writer.write(string);
        this.writer.flush();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comandos ::= ID IGUAL ID DIV DIGIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comandos ::= ID IGUAL ID POR DIGIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comandos ::= ID IGUAL ID MENOS DIGIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comandos ::= ID IGUAL ID PLUS DIGIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comandos",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // igualdad ::= type ID IGUAL DIGIT PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("igualdad",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion ::= type ID PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // type ::= DOBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // contenido ::= comandos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // contenido ::= igualdad contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // contenido ::= declaracion contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenido",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // func ::= LLAVEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // func ::= RETURN ID PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func ::= PARENC LLAVEC contenido 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func ::= type ID PARENA PARAMLIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("func",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // proc ::= VOID ID PARENA PARAMLIST PARENC LLAVEA contenido LLAVEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("proc",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // clase ::= PUBLIC clase ID LLAVEA contenido LLAVEC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("clase",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // estruct ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estruct",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // estruct ::= func estruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estruct",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // estruct ::= proc estruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estruct",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // estruct ::= clase estruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("estruct",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= estruct 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

